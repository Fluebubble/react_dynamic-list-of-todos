{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/FilterBy.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onTodoSelect","selectedTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","searchQuery","filter","onQueryChange","handleClearQuery","onFilterSelect","onChange","event","defaultValue","value","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterBy","TodoModal","handleCloseTodo","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","areTodosLoading","setAreTodosLoading","setSelectedTodo","setSearchQuery","all","setFilter","result","todosToRender","query","todosToPrepare","active","lowerQuery","toLowerCase","includes","prepareTodos","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7092338.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  onTodoSelect: (todo: Todo) => void\n  selectedTodo: Todo | null,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onTodoSelect,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onTodoSelect(todo)}\n            >\n              <span className=\"icon\">\n                <i\n                  className={classNames(\n                    'far',\n                    {\n                      'fa-eye': selectedTodo?.id !== todo.id,\n                      'fa-eye-slash': selectedTodo?.id\n                        && selectedTodo.id === todo.id,\n                    },\n                  )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { FilterBy } from '../../types/FilterBy';\n\ninterface Props {\n  searchQuery: string,\n  filter: FilterBy\n  onQueryChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  handleClearQuery: () => void\n  onFilterSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  searchQuery,\n  filter,\n  onQueryChange,\n  handleClearQuery,\n  onFilterSelect,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={event => onFilterSelect(event)}\n          defaultValue={filter}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={event => onQueryChange(event)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n        {!!searchQuery.length\n          && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n              aria-label=\"Clear Search\"\n            />\n          )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader: React.FC = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterBy {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedTodo: Todo,\n  handleCloseTodo: () => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  handleCloseTodo,\n}) => {\n  const [user, setUser] = useState<null | User>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId).then(setUser);\n\n    return () => {\n      setUser(null);\n    };\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleCloseTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-success': selectedTodo.completed,\n                  'has-text-danger': !selectedTodo.completed,\n                })}\n              >\n                {selectedTodo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterBy } from './types/FilterBy';\n\nconst prepareTodos = (todos: Todo[], filter = FilterBy.all, query: string) => {\n  let todosToPrepare = [...todos];\n\n  if (filter) {\n    switch (filter) {\n      case FilterBy.active:\n        todosToPrepare = todosToPrepare.filter(todo => !todo.completed);\n        break;\n      case FilterBy.completed:\n        todosToPrepare = todosToPrepare.filter(todo => todo.completed);\n        break;\n      case FilterBy.all:\n        todosToPrepare = [...todos];\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    todosToPrepare = todosToPrepare.filter(todo => todo.title\n      .toLowerCase()\n      .includes(lowerQuery));\n  }\n\n  return todosToPrepare;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[] | null>(null);\n  const [areTodosLoading, setAreTodosLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filter, setFilter] = useState<FilterBy>(FilterBy.all);\n\n  const handleTodoSelect = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handleCloseTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  useEffect(() => {\n    getTodos().then(result => {\n      setAreTodosLoading(false);\n      setTodos(result);\n    });\n  }, []);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleClearQuery = () => {\n    setSearchQuery('');\n  };\n\n  const handleFilterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilter(event.target.value as FilterBy);\n  };\n\n  let todosToRender;\n\n  if (todos) {\n    todosToRender = prepareTodos(todos, filter, searchQuery);\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                filter={filter}\n                onQueryChange={handleQueryChange}\n                handleClearQuery={handleClearQuery}\n                onFilterSelect={handleFilterSelect}\n              />\n            </div>\n\n            <div className=\"block\">\n              {areTodosLoading && <Loader />}\n              {\n                !!todosToRender\n                && (\n                  <TodoList\n                    todos={todosToRender}\n                    onTodoSelect={handleTodoSelect}\n                    selectedTodo={selectedTodo}\n                  />\n                )\n              }\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {\n        selectedTodo\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            handleCloseTodo={handleCloseTodo}\n          />\n        )\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}